/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ocs.indaba.util;

import java.io.*;
import java.util.zip.CRC32;
import java.util.zip.CheckedOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.log4j.Logger;

/**
 *
 * @author Jeff Jiang
 */
public class ZipUtils {

    private static final Logger LOG = Logger.getLogger(ZipUtils.class);
    private static final int BUF_SIZE = 1024;

    public static void zip(String srcFilePath, String targetFilePath) throws IOException {
        zip(new File(srcFilePath), new File(targetFilePath));
    }

    public static void zip(File srcFile, File targetFile) throws IOException {
        FileOutputStream fos = new FileOutputStream(targetFile);
        zip(srcFile, fos);

        // CLOSEFILE
        fos.close();
    }

    public static void zip(File srcFile, OutputStream targetOutStream) throws IOException {
        ZipOutputStream zipOut = null;
        BufferedOutputStream bos = null;
        CheckedOutputStream cos = null;

        try {
            cos = new CheckedOutputStream(targetOutStream, new CRC32());
            bos = new BufferedOutputStream(cos);
            zipOut = new ZipOutputStream(bos);
            if (srcFile.isFile()) {
                zipFile(srcFile, zipOut);
            } else if (srcFile.isDirectory()) {
                File[] files = srcFile.listFiles();
                if (files != null && files.length > 0) {
                    for (File f : files) {
                        zipFile(f, zipOut);
                    }
                }
            }
        } finally {
            if (zipOut != null) {
                try {
                    zipOut.flush();
                    zipOut.close();
                } catch (IOException ex) {
                }
            }

            if (cos != null) {
                try {
                    cos.close();
                } catch (Exception e) {
                }
            }

            if (bos != null) {
                try {
                    bos.close();
                } catch (Exception e) {
                }
            }
        }
    }

    private static void zipFile(File srcFile, ZipOutputStream zipOut) throws IOException {
        FileInputStream fis = new FileInputStream(srcFile);
        InputStream inStream = new BufferedInputStream(fis);
        ZipEntry zipEntry = new ZipEntry(srcFile.getName());
        zipOut.putNextEntry(zipEntry);
        byte[] buf = new byte[BUF_SIZE];
        int len = 0;
        while ((len = (inStream.read(buf, 0, BUF_SIZE))) != -1) {
            zipOut.write(buf, 0, len);
        }
        zipOut.flush();

        // CLOSEFILE
        fis.close();
        inStream.close();
    }

    /**
     * Recursively create ZIP archive from directory
     */
    public static void zipAll(File path, String filePath) throws IOException {
       zipAll(path, "", filePath);
    }
    
    /**
     * Recursively create ZIP archive from directory
     */
    public static void zipAll(File path, String root, String filePath) throws IOException {
        OutputStream os = new FileOutputStream(filePath);
        try {
            zipAll(path, root, os);
        } finally {
            if (os != null) {
                os.close();
            }
        }
    }
    
    public static void zipAll(File path, OutputStream os) throws IOException {
        zipAll(path, "", os);
    }

    /**
     * Recursively create ZIP archive from directory
     */
    public static void zipAll(File path, String root, OutputStream os) throws IOException {

        if (path.exists() && path.canRead()) {
            ZipArchiveOutputStream zaos = new ZipArchiveOutputStream(os);
            zaos.setComment("Generated by OpenKM");
            zaos.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy.ALWAYS);
            zaos.setUseLanguageEncodingFlag(true);
            zaos.setFallbackToUTF8(true);
            zaos.setEncoding("UTF-8");

            // Prevents java.util.zip.ZipException: ZIP file must have at least one entry
            ZipArchiveEntry zae = new ZipArchiveEntry(root + "/");
            zaos.putArchiveEntry(zae);
            zaos.closeArchiveEntry();

            createZipHelper(path, zaos, root);

            zaos.flush();
            zaos.finish();
            zaos.close();
        } else {
            throw new IOException("Can't access " + path);
        }

    }

    /**
     * Recursively create ZIP archive from directory helper utility
     */
    private static void createZipHelper(File fs, ZipArchiveOutputStream zaos, String zePath) throws IOException {
        File[] files = fs.listFiles();

        for (int i = 0; i < files.length; i++) {
            if (files[i].isDirectory()) {
                ZipArchiveEntry zae = new ZipArchiveEntry(zePath + "/" + files[i].getName() + "/");
                zaos.putArchiveEntry(zae);
                zaos.closeArchiveEntry();

                createZipHelper(files[i], zaos, zePath + "/" + files[i].getName());
            } else {
                ZipArchiveEntry zae = new ZipArchiveEntry(zePath + "/" + files[i].getName());
                zaos.putArchiveEntry(zae);
                FileInputStream fis = new FileInputStream(files[i]);
                IOUtils.copy(fis, zaos);
                fis.close();
                zaos.closeArchiveEntry();
            }
        }
    }

    public static void main(String args[]) throws IOException {
        zipAll(new File("C:\\data\\indaba\\aggregation\\export\\120418142019578_50374a34-5dd7-4c72-943e-620651efa68d"), "", "C:\\prd.zip");
    }
}
